from __future__ import annotations

from flask import Blueprint, render_template, request, redirect, url_for

from .models import Article
from .utils import ALL_ARTICLES, filter_articles, paginate, save_article_meta

bp = Blueprint("webapp", __name__)


@bp.route("/")
def index() -> str:
    page = int(request.args.get("page", 1))
    tag = request.args.get("tag")
    search = request.args.get("search", "")
    filtered = filter_articles("inbox", tag, search, None)
    articles, has_next = paginate(filtered, page)
    tags = sorted({t for a in ALL_ARTICLES for t in a.tags})
    return render_template(
        "index.html",
        articles=articles,
        tags=tags,
        page=page,
        has_next=has_next,
        title="Inbox",
    )


@bp.route("/helpful")
def helpful() -> str:
    page = int(request.args.get("page", 1))
    tag = request.args.get("tag")
    search = request.args.get("search", "")
    filtered = filter_articles("helpful", tag, search, None)
    articles, has_next = paginate(filtered, page)
    tags = sorted({t for a in ALL_ARTICLES for t in a.tags})
    return render_template(
        "index.html",
        articles=articles,
        tags=tags,
        page=page,
        has_next=has_next,
        title="Helpful",
    )


@bp.route("/useless")
def useless() -> str:
    page = int(request.args.get("page", 1))
    tag = request.args.get("tag")
    search = request.args.get("search", "")
    filtered = filter_articles("useless", tag, search, None)
    articles, has_next = paginate(filtered, page)
    tags = sorted({t for a in ALL_ARTICLES for t in a.tags})
    return render_template(
        "index.html",
        articles=articles,
        tags=tags,
        page=page,
        has_next=has_next,
        title="Useless",
    )


@bp.route("/topic/<topic>")
def topic_view(topic: str) -> str:
    page = int(request.args.get("page", 1))
    tag = request.args.get("tag")
    search = request.args.get("search", "")
    filtered = [a for a in ALL_ARTICLES if a.topic == topic]
    if tag:
        filtered = [a for a in filtered if tag in a.tags]
    if search:
        q = search.lower()
        filtered = [a for a in filtered if q in a.title.lower() or q in a.summary.lower()]
    articles, has_next = paginate(filtered, page)
    tags = sorted({t for a in filtered for t in a.tags})
    return render_template(
        "topic.html",
        articles=articles,
        tags=tags,
        page=page,
        has_next=has_next,
        title=f"Topic: {topic}",
        topic=topic,
    )


@bp.route("/article/<path:article_id>")
def view_article(article_id: str) -> str:
    article = next((a for a in ALL_ARTICLES if a.id == article_id), None)
    if article is None:
        return "Not found", 404
    return render_template("article.html", article=article, title=article.title)


@bp.route("/add", methods=["GET", "POST"])
def add_article() -> str:
    if request.method == "POST":
        title = request.form.get("title", "New Article")
        url = request.form.get("url", "")
        tags = [t.strip() for t in request.form.get("tags", "").split(",") if t.strip()]
        topic = request.form.get("topic", "general")
        identifier = f"manual:{title}"
        summary = "Summary will be generated by backend."
        content = f"<p>Placeholder for {title}. Link: {url}</p>"
        article = Article(identifier, title, "", summary, content, identifier)
        article.tags = tags
        article.topic = topic
        ALL_ARTICLES.insert(0, article)
        save_article_meta(article)
        return redirect(url_for("webapp.index"))
    return render_template("add_article.html", title="Add Article")


@bp.post("/like/<path:article_id>")
def like_article(article_id: str):
    article = next((a for a in ALL_ARTICLES if a.id == article_id), None)
    if article:
        article.likes += 1
        save_article_meta(article)
    return redirect(request.referrer or url_for("webapp.index"))


@bp.post("/dislike/<path:article_id>")
def dislike_article(article_id: str):
    article = next((a for a in ALL_ARTICLES if a.id == article_id), None)
    if article:
        article.dislikes += 1
        save_article_meta(article)
    return redirect(request.referrer or url_for("webapp.index"))
